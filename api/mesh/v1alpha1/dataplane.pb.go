// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.0
// source: api/mesh/v1alpha1/dataplane.proto

package v1alpha1

import (
	_ "github.com/apache/dubbo-kubernetes/api/mesh"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Dataplane defines configuration of a side-car proxy.
type Dataplane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Networking describes inbound and outbound interfaces of the dataplane.
	Networking *Dataplane_Networking `protobuf:"bytes,1,opt,name=networking,proto3" json:"networking,omitempty"`
	// Probes describes list of endpoints which will redirect traffic from
	// insecure port to localhost path
	Probes *Dataplane_Probes `protobuf:"bytes,3,opt,name=probes,proto3" json:"probes,omitempty"`
}

func (x *Dataplane) Reset() {
	*x = Dataplane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane) ProtoMessage() {}

func (x *Dataplane) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane.ProtoReflect.Descriptor instead.
func (*Dataplane) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0}
}

func (x *Dataplane) GetNetworking() *Dataplane_Networking {
	if x != nil {
		return x.Networking
	}
	return nil
}

func (x *Dataplane) GetProbes() *Dataplane_Probes {
	if x != nil {
		return x.Probes
	}
	return nil
}

// Networking describes inbound and outbound interfaces of a dataplane.
type Dataplane_Networking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ingress if not nil, dataplane will be work in the Ingress mode
	Ingress *Dataplane_Networking_Ingress `protobuf:"bytes,6,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// Public IP on which the dataplane is accessible in the network.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Inbound describes a list of inbound interfaces of the dataplane.
	Inbound []*Dataplane_Networking_Inbound `protobuf:"bytes,1,rep,name=inbound,proto3" json:"inbound,omitempty"`
	// Outbound describes a list of outbound interfaces of the dataplane.
	Outbound []*Dataplane_Networking_Outbound `protobuf:"bytes,2,rep,name=outbound,proto3" json:"outbound,omitempty"`
}

func (x *Dataplane_Networking) Reset() {
	*x = Dataplane_Networking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Networking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking) ProtoMessage() {}

func (x *Dataplane_Networking) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Dataplane_Networking) GetIngress() *Dataplane_Networking_Ingress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *Dataplane_Networking) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Dataplane_Networking) GetInbound() []*Dataplane_Networking_Inbound {
	if x != nil {
		return x.Inbound
	}
	return nil
}

func (x *Dataplane_Networking) GetOutbound() []*Dataplane_Networking_Outbound {
	if x != nil {
		return x.Outbound
	}
	return nil
}

type Dataplane_Probes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port      uint32                       `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Endpoints []*Dataplane_Probes_Endpoint `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *Dataplane_Probes) Reset() {
	*x = Dataplane_Probes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Probes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Probes) ProtoMessage() {}

func (x *Dataplane_Probes) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Probes.ProtoReflect.Descriptor instead.
func (*Dataplane_Probes) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Dataplane_Probes) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Dataplane_Probes) GetEndpoints() []*Dataplane_Probes_Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// Ingress allows us to configure dataplane in the Ingress mode. In this
// mode, dataplane has only inbound interfaces (outbound and gateway
// prohibited). Every inbound interface matches with services that reside in
// that cluster.
type Dataplane_Networking_Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableServices []*Dataplane_Networking_Ingress_AvailableService `protobuf:"bytes,1,rep,name=availableServices,proto3" json:"availableServices,omitempty"`
	// PublicAddress defines IP or DNS name on which Ingress is accessible to
	// other Dubbo clusters.
	PublicAddress string `protobuf:"bytes,2,opt,name=publicAddress,proto3" json:"publicAddress,omitempty"`
	// PublicPort defines port on which Ingress is accessible to other Dubbo
	// clusters.
	PublicPort uint32 `protobuf:"varint,3,opt,name=publicPort,proto3" json:"publicPort,omitempty"`
}

func (x *Dataplane_Networking_Ingress) Reset() {
	*x = Dataplane_Networking_Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Networking_Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Ingress) ProtoMessage() {}

func (x *Dataplane_Networking_Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Ingress.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Ingress) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Dataplane_Networking_Ingress) GetAvailableServices() []*Dataplane_Networking_Ingress_AvailableService {
	if x != nil {
		return x.AvailableServices
	}
	return nil
}

func (x *Dataplane_Networking_Ingress) GetPublicAddress() string {
	if x != nil {
		return x.PublicAddress
	}
	return ""
}

func (x *Dataplane_Networking_Ingress) GetPublicPort() uint32 {
	if x != nil {
		return x.PublicPort
	}
	return 0
}

// Inbound describes a service implemented by the dataplane.
type Dataplane_Networking_Inbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port of the inbound interface that will forward requests to the
	// service.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Port of the service that requests will be forwarded to.
	ServicePort uint32 `protobuf:"varint,4,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
	// Address of the service that requests will be forwarded to.
	// Empty value defaults to '127.0.0.1', since Kuma DP should be deployed
	// next to service.
	ServiceAddress string `protobuf:"bytes,6,opt,name=serviceAddress,proto3" json:"serviceAddress,omitempty"`
	// Address on which inbound listener will be exposed. Defaults to
	// networking.address.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Tags associated with an application this dataplane is deployed next to,
	// e.g. kuma.io/service=web, version=1.0.
	// `kuma.io/service` tag is mandatory.
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Health is an optional field filled automatically by Kuma Control Plane
	// on Kubernetes if Pod has ReadinessProbe configured. If 'health' is
	// equal to nil we consider dataplane as healthy. Unhealthy dataplanes
	// will be excluded from Endpoints Discovery Service (EDS)
	Health *Dataplane_Networking_Inbound_Health `protobuf:"bytes,7,opt,name=health,proto3" json:"health,omitempty"`
	// ServiceProbe defines parameters for probing service's port
	ServiceProbe *Dataplane_Networking_Inbound_ServiceProbe `protobuf:"bytes,8,opt,name=serviceProbe,proto3" json:"serviceProbe,omitempty"`
}

func (x *Dataplane_Networking_Inbound) Reset() {
	*x = Dataplane_Networking_Inbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Networking_Inbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Inbound) ProtoMessage() {}

func (x *Dataplane_Networking_Inbound) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Inbound.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Inbound) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Dataplane_Networking_Inbound) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Dataplane_Networking_Inbound) GetServicePort() uint32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

func (x *Dataplane_Networking_Inbound) GetServiceAddress() string {
	if x != nil {
		return x.ServiceAddress
	}
	return ""
}

func (x *Dataplane_Networking_Inbound) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Dataplane_Networking_Inbound) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dataplane_Networking_Inbound) GetHealth() *Dataplane_Networking_Inbound_Health {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *Dataplane_Networking_Inbound) GetServiceProbe() *Dataplane_Networking_Inbound_ServiceProbe {
	if x != nil {
		return x.ServiceProbe
	}
	return nil
}

// Outbound describes a service consumed by the dataplane.
type Dataplane_Networking_Outbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address on which the service will be available to this dataplane.
	// Defaults to 127.0.0.1
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Port on which the service will be available to this dataplane.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// DEPRECATED: use networking.outbound[].tags
	// Service name.
	//
	// Deprecated: Do not use.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// Tags
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Dataplane_Networking_Outbound) Reset() {
	*x = Dataplane_Networking_Outbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Networking_Outbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Outbound) ProtoMessage() {}

func (x *Dataplane_Networking_Outbound) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Outbound.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Outbound) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Dataplane_Networking_Outbound) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Dataplane_Networking_Outbound) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Deprecated: Do not use.
func (x *Dataplane_Networking_Outbound) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Dataplane_Networking_Outbound) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// AvailableService contains tags that represent unique subset of
// endpoints
type Dataplane_Networking_Ingress_AvailableService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tags of the service
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// number of instances available for given tags
	Instances uint32 `protobuf:"varint,2,opt,name=instances,proto3" json:"instances,omitempty"`
	// mesh of the instances available for given tags
	Mesh string `protobuf:"bytes,3,opt,name=mesh,proto3" json:"mesh,omitempty"`
}

func (x *Dataplane_Networking_Ingress_AvailableService) Reset() {
	*x = Dataplane_Networking_Ingress_AvailableService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Networking_Ingress_AvailableService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Ingress_AvailableService) ProtoMessage() {}

func (x *Dataplane_Networking_Ingress_AvailableService) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Ingress_AvailableService.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Ingress_AvailableService) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Dataplane_Networking_Ingress_AvailableService) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dataplane_Networking_Ingress_AvailableService) GetInstances() uint32 {
	if x != nil {
		return x.Instances
	}
	return 0
}

func (x *Dataplane_Networking_Ingress_AvailableService) GetMesh() string {
	if x != nil {
		return x.Mesh
	}
	return ""
}

// Health describes the status of an inbound
type Dataplane_Networking_Inbound_Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *Dataplane_Networking_Inbound_Health) Reset() {
	*x = Dataplane_Networking_Inbound_Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Networking_Inbound_Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Inbound_Health) ProtoMessage() {}

func (x *Dataplane_Networking_Inbound_Health) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Inbound_Health.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Inbound_Health) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *Dataplane_Networking_Inbound_Health) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

// ServiceProbe defines parameters for probing service's port
type Dataplane_Networking_Inbound_ServiceProbe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interval between consecutive health checks.
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Maximum time to wait for a health check response.
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Number of consecutive unhealthy checks before considering a host
	// unhealthy.
	UnhealthyThreshold *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// Number of consecutive healthy checks before considering a host
	// healthy.
	HealthyThreshold *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// Tcp checker tries to establish tcp connection with destination
	Tcp *Dataplane_Networking_Inbound_ServiceProbe_Tcp `protobuf:"bytes,5,opt,name=tcp,proto3" json:"tcp,omitempty"`
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) Reset() {
	*x = Dataplane_Networking_Inbound_ServiceProbe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Inbound_ServiceProbe) ProtoMessage() {}

func (x *Dataplane_Networking_Inbound_ServiceProbe) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Inbound_ServiceProbe.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Inbound_ServiceProbe) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 1, 2}
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetUnhealthyThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.UnhealthyThreshold
	}
	return nil
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetHealthyThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.HealthyThreshold
	}
	return nil
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetTcp() *Dataplane_Networking_Inbound_ServiceProbe_Tcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

type Dataplane_Networking_Inbound_ServiceProbe_Tcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Dataplane_Networking_Inbound_ServiceProbe_Tcp) Reset() {
	*x = Dataplane_Networking_Inbound_ServiceProbe_Tcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Networking_Inbound_ServiceProbe_Tcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Inbound_ServiceProbe_Tcp) ProtoMessage() {}

func (x *Dataplane_Networking_Inbound_ServiceProbe_Tcp) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Inbound_ServiceProbe_Tcp.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Inbound_ServiceProbe_Tcp) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 1, 2, 0}
}

type Dataplane_Probes_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboundPort uint32 `protobuf:"varint,1,opt,name=inbound_port,json=inboundPort,proto3" json:"inbound_port,omitempty"`
	InboundPath string `protobuf:"bytes,2,opt,name=inbound_path,json=inboundPath,proto3" json:"inbound_path,omitempty"`
	Path        string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Dataplane_Probes_Endpoint) Reset() {
	*x = Dataplane_Probes_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane_Probes_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Probes_Endpoint) ProtoMessage() {}

func (x *Dataplane_Probes_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Probes_Endpoint.ProtoReflect.Descriptor instead.
func (*Dataplane_Probes_Endpoint) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Dataplane_Probes_Endpoint) GetInboundPort() uint32 {
	if x != nil {
		return x.InboundPort
	}
	return 0
}

func (x *Dataplane_Probes_Endpoint) GetInboundPath() string {
	if x != nil {
		return x.InboundPath
	}
	return ""
}

func (x *Dataplane_Probes_Endpoint) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_api_mesh_v1alpha1_dataplane_proto protoreflect.FileDescriptor

var file_api_mesh_v1alpha1_dataplane_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x11, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x75,
	0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x73, 0x1a, 0x83, 0x0e, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x4b, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x07, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x1a, 0xa3, 0x03, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x70, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x64, 0x75,
	0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0xdf, 0x01, 0x0a, 0x10, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x64, 0x75,
	0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x73,
	0x68, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xdf, 0x06, 0x0a, 0x07, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x59,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64,
	0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x9a, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x75, 0x62, 0x62,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x62, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x1e, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x1a, 0xf1, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x54, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x64,
	0x75, 0x62, 0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x63, 0x70,
	0x52, 0x03, 0x74, 0x63, 0x70, 0x1a, 0x05, 0x0a, 0x03, 0x54, 0x63, 0x70, 0x1a, 0xe8, 0x01, 0x0a,
	0x08, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x18, 0x01, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x68, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64, 0x75, 0x62,
	0x62, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd0, 0x01, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x75, 0x62, 0x62,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x1a, 0x64, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x6f, 0xaa, 0x8c, 0x89, 0xa6,
	0x01, 0x13, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x0b, 0x12, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x06, 0x22, 0x04, 0x6d, 0x65,
	0x73, 0x68, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x04, 0x52, 0x02, 0x10, 0x01, 0xaa, 0x8c, 0x89, 0xa6,
	0x01, 0x0d, 0x3a, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0xaa,
	0x8c, 0x89, 0xa6, 0x01, 0x0e, 0x3a, 0x0c, 0x12, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x02, 0x68, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_mesh_v1alpha1_dataplane_proto_rawDescOnce sync.Once
	file_api_mesh_v1alpha1_dataplane_proto_rawDescData = file_api_mesh_v1alpha1_dataplane_proto_rawDesc
)

func file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP() []byte {
	file_api_mesh_v1alpha1_dataplane_proto_rawDescOnce.Do(func() {
		file_api_mesh_v1alpha1_dataplane_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_mesh_v1alpha1_dataplane_proto_rawDescData)
	})
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescData
}

var file_api_mesh_v1alpha1_dataplane_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_mesh_v1alpha1_dataplane_proto_goTypes = []interface{}{
	(*Dataplane)(nil),                                     // 0: dubbo.mesh.v1alpha1.Dataplane
	(*Dataplane_Networking)(nil),                          // 1: dubbo.mesh.v1alpha1.Dataplane.Networking
	(*Dataplane_Probes)(nil),                              // 2: dubbo.mesh.v1alpha1.Dataplane.Probes
	(*Dataplane_Networking_Ingress)(nil),                  // 3: dubbo.mesh.v1alpha1.Dataplane.Networking.Ingress
	(*Dataplane_Networking_Inbound)(nil),                  // 4: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound
	(*Dataplane_Networking_Outbound)(nil),                 // 5: dubbo.mesh.v1alpha1.Dataplane.Networking.Outbound
	(*Dataplane_Networking_Ingress_AvailableService)(nil), // 6: dubbo.mesh.v1alpha1.Dataplane.Networking.Ingress.AvailableService
	nil, // 7: dubbo.mesh.v1alpha1.Dataplane.Networking.Ingress.AvailableService.TagsEntry
	nil, // 8: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.TagsEntry
	(*Dataplane_Networking_Inbound_Health)(nil),           // 9: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.Health
	(*Dataplane_Networking_Inbound_ServiceProbe)(nil),     // 10: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe
	(*Dataplane_Networking_Inbound_ServiceProbe_Tcp)(nil), // 11: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.Tcp
	nil,                               // 12: dubbo.mesh.v1alpha1.Dataplane.Networking.Outbound.TagsEntry
	(*Dataplane_Probes_Endpoint)(nil), // 13: dubbo.mesh.v1alpha1.Dataplane.Probes.Endpoint
	(*durationpb.Duration)(nil),       // 14: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),    // 15: google.protobuf.UInt32Value
}
var file_api_mesh_v1alpha1_dataplane_proto_depIdxs = []int32{
	1,  // 0: dubbo.mesh.v1alpha1.Dataplane.networking:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking
	2,  // 1: dubbo.mesh.v1alpha1.Dataplane.probes:type_name -> dubbo.mesh.v1alpha1.Dataplane.Probes
	3,  // 2: dubbo.mesh.v1alpha1.Dataplane.Networking.ingress:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Ingress
	4,  // 3: dubbo.mesh.v1alpha1.Dataplane.Networking.inbound:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound
	5,  // 4: dubbo.mesh.v1alpha1.Dataplane.Networking.outbound:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Outbound
	13, // 5: dubbo.mesh.v1alpha1.Dataplane.Probes.endpoints:type_name -> dubbo.mesh.v1alpha1.Dataplane.Probes.Endpoint
	6,  // 6: dubbo.mesh.v1alpha1.Dataplane.Networking.Ingress.availableServices:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Ingress.AvailableService
	8,  // 7: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.tags:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.TagsEntry
	9,  // 8: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.health:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.Health
	10, // 9: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.serviceProbe:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe
	12, // 10: dubbo.mesh.v1alpha1.Dataplane.Networking.Outbound.tags:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Outbound.TagsEntry
	7,  // 11: dubbo.mesh.v1alpha1.Dataplane.Networking.Ingress.AvailableService.tags:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Ingress.AvailableService.TagsEntry
	14, // 12: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.interval:type_name -> google.protobuf.Duration
	14, // 13: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.timeout:type_name -> google.protobuf.Duration
	15, // 14: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.unhealthy_threshold:type_name -> google.protobuf.UInt32Value
	15, // 15: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.healthy_threshold:type_name -> google.protobuf.UInt32Value
	11, // 16: dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.tcp:type_name -> dubbo.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.Tcp
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_api_mesh_v1alpha1_dataplane_proto_init() }
func file_api_mesh_v1alpha1_dataplane_proto_init() {
	if File_api_mesh_v1alpha1_dataplane_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Networking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Probes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Networking_Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Networking_Inbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Networking_Outbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Networking_Ingress_AvailableService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Networking_Inbound_Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Networking_Inbound_ServiceProbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Networking_Inbound_ServiceProbe_Tcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_mesh_v1alpha1_dataplane_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane_Probes_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_mesh_v1alpha1_dataplane_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_mesh_v1alpha1_dataplane_proto_goTypes,
		DependencyIndexes: file_api_mesh_v1alpha1_dataplane_proto_depIdxs,
		MessageInfos:      file_api_mesh_v1alpha1_dataplane_proto_msgTypes,
	}.Build()
	File_api_mesh_v1alpha1_dataplane_proto = out.File
	file_api_mesh_v1alpha1_dataplane_proto_rawDesc = nil
	file_api_mesh_v1alpha1_dataplane_proto_goTypes = nil
	file_api_mesh_v1alpha1_dataplane_proto_depIdxs = nil
}
