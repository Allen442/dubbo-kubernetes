package dubbo_cp

import (
	dubbogo "dubbo.apache.org/dubbo-go/v3/config"
	"github.com/apache/dubbo-kubernetes/pkg/config/admin"
	"github.com/apache/dubbo-kubernetes/pkg/config/bufman"
	"github.com/apache/dubbo-kubernetes/pkg/config/intercp"
	"github.com/apache/dubbo-kubernetes/pkg/config/multizone"
	config_types "github.com/apache/dubbo-kubernetes/pkg/config/types"
	"github.com/apache/dubbo-kubernetes/pkg/config/xds"
	"github.com/apache/dubbo-kubernetes/pkg/config/xds/bootstrap"
	"github.com/pkg/errors"
	"time"

	"go.uber.org/multierr"
)

import (
	"github.com/apache/dubbo-kubernetes/pkg/config"
	"github.com/apache/dubbo-kubernetes/pkg/config/core"
	"github.com/apache/dubbo-kubernetes/pkg/config/core/resources/store"
	"github.com/apache/dubbo-kubernetes/pkg/config/diagnostics"
	dp_server "github.com/apache/dubbo-kubernetes/pkg/config/dp-server"
	"github.com/apache/dubbo-kubernetes/pkg/config/eventbus"
	"github.com/apache/dubbo-kubernetes/pkg/config/plugins/runtime"
)

var _ config.Config = &Config{}

var _ config.Config = &Defaults{}

type Defaults struct {
	config.BaseConfig

	// If true, it skips creating the default Mesh
	SkipMeshCreation bool `json:"skipMeshCreation" envconfig:"dubbo_defaults_skip_mesh_creation"`
}

type GeneralConfig struct {
	config.BaseConfig

	// DNSCacheTTL represents duration for how long Kuma CP will cache result of resolving dataplane's domain name
	DNSCacheTTL config_types.Duration `json:"dnsCacheTTL" envconfig:"kuma_general_dns_cache_ttl"`
	// TlsCertFile defines a path to a file with PEM-encoded TLS cert that will be used across all the Kuma Servers.
	TlsCertFile string `json:"tlsCertFile" envconfig:"kuma_general_tls_cert_file"`
	// TlsKeyFile defines a path to a file with PEM-encoded TLS key that will be used across all the Kuma Servers.
	TlsKeyFile string `json:"tlsKeyFile" envconfig:"kuma_general_tls_key_file"`
	// TlsMinVersion defines the minimum TLS version to be used
	TlsMinVersion string `json:"tlsMinVersion" envconfig:"kuma_general_tls_min_version"`
	// TlsMaxVersion defines the maximum TLS version to be used
	TlsMaxVersion string `json:"tlsMaxVersion" envconfig:"kuma_general_tls_max_version"`
	// TlsCipherSuites defines the list of ciphers to use
	TlsCipherSuites []string `json:"tlsCipherSuites" envconfig:"kuma_general_tls_cipher_suites"`
	// WorkDir defines a path to the working directory
	// Dubbo stores in this directory autogenerated entities like certificates.
	// If empty then the working directory is $HOME/.dubbo
	WorkDir string `json:"workDir" envconfig:"kuma_general_work_dir"`
}

type Config struct {
	// General configuration
	General *GeneralConfig `json:"general,omitempty"`
	// Environment Type, can be either "kubernetes" or "universal"
	Environment core.EnvironmentType `json:"environment,omitempty" envconfig:"dubbo_environment"`
	// Mode in which dubbo CP is running. Available values are: "standalone", "global", "zone"
	Mode core.CpMode `json:"mode" envconfig:"dubbo_mode"`
	// Configuration of Bootstrap Server, which provides bootstrap config to Dataplanes
	BootstrapServer *bootstrap.BootstrapServerConfig `json:"bootstrapServer,omitempty"`
	// Resource Store configuration
	Store *store.StoreConfig `json:"store,omitempty"`
	// Envoy XDS server configuration
	XdsServer *xds.XdsServerConfig `json:"xdsServer,omitempty"`
	// Environment-specific configuration
	Runtime *runtime.RuntimeConfig `json:"runtime,omitempty"`
	// Multizone Config
	Multizone *multizone.MultizoneConfig `json:"multizone,omitempty"`
	// Default dubbo entities configuration
	Defaults *Defaults `json:"defaults,omitempty"`
	// Diagnostics configuration
	Diagnostics *diagnostics.DiagnosticsConfig `json:"diagnostics,omitempty"`
	// Dataplane Server configuration
	DpServer *dp_server.DpServerConfig `json:"dpServer"`
	// EventBus is a configuration of the event bus which is local to one instance of CP.
	EventBus eventbus.Config `json:"eventBus"`
	// Intercommunication CP configuration
	InterCp intercp.InterCpConfig `json:"interCp"`
	Bufman  bufman.Bufman         `json:"bufman"`
	Admin   admin.Admin           `json:"admin"`
	Dubbo   dubbogo.RootConfig    `json:"dubbo"`
}

func (c Config) IsFederatedZoneCP() bool {
	return c.Mode == core.Zone && c.Multizone.Zone.GlobalAddress != "" && c.Multizone.Zone.Name != ""
}

func (c Config) IsNonFederatedZoneCP() bool {
	return c.Mode == core.Zone && !c.IsFederatedZoneCP()
}

func (c *Config) Sanitize() {
	c.Store.Sanitize()

	c.Runtime.Sanitize()
	c.Defaults.Sanitize()

	c.Diagnostics.Sanitize()
}

func (c *Config) PostProcess() error {
	return multierr.Combine(
		c.Store.PostProcess(),
		c.Runtime.PostProcess(),
		c.Defaults.PostProcess(),
		c.Diagnostics.PostProcess(),
	)
}

var DefaultConfig = func() Config {
	return Config{
		Environment: core.KubernetesEnvironment,
		Mode:        core.Zone,
		XdsServer:   xds.DefaultXdsServerConfig(),
		Store:       store.DefaultStoreConfig(),
		Runtime:     runtime.DefaultRuntimeConfig(),
		General:     DefaultGeneralConfig(),
		Defaults:    DefaultDefaultsConfig(),
		Multizone:   multizone.DefaultMultizoneConfig(),
		Diagnostics: diagnostics.DefaultDiagnosticsConfig(),
		DpServer:    dp_server.DefaultDpServerConfig(),
		EventBus:    eventbus.Default(),
	}
}

func DefaultGeneralConfig() *GeneralConfig {
	return &GeneralConfig{
		DNSCacheTTL:     config_types.Duration{Duration: 10 * time.Second},
		WorkDir:         "",
		TlsCipherSuites: []string{},
		TlsMinVersion:   "TLSv1_2",
	}
}

func DefaultDefaultsConfig() *Defaults {
	return &Defaults{
		SkipMeshCreation: false,
	}
}

func (c *Config) Validate() error {
	if err := core.ValidateCpMode(c.Mode); err != nil {
		return errors.Wrap(err, "Mode validation failed")
	}
	switch c.Mode {
	case core.Global:
	case core.Zone:
		if c.Environment != core.KubernetesEnvironment && c.Environment != core.UniversalEnvironment {
			return errors.Errorf("Environment should be either %s or %s", core.KubernetesEnvironment, core.UniversalEnvironment)
		}
		if err := c.Runtime.Validate(c.Environment); err != nil {
			return errors.Wrap(err, "Runtime validation failed")
		}
	}
	if err := c.Store.Validate(); err != nil {
		return errors.Wrap(err, "Store validation failed")
	}
	if err := c.Defaults.Validate(); err != nil {
		return errors.Wrap(err, "Defaults validation failed")
	}
	if err := c.Diagnostics.Validate(); err != nil {
		return errors.Wrap(err, "Diagnostics validation failed")
	}

	return nil
}

func (c Config) GetEnvoyAdminPort() uint32 {
	if c.BootstrapServer == nil || c.BootstrapServer.Params == nil {
		return 0
	}
	return c.BootstrapServer.Params.AdminPort
}
