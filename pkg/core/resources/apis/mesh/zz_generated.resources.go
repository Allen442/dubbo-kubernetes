// Generated by tools/resource-gen.
// Run "make generate" to update this file.

// nolint:whitespace
package mesh

import (
	"fmt"
)

import (
	mesh_proto "github.com/apache/dubbo-kubernetes/api/mesh/v1alpha1"
	"github.com/apache/dubbo-kubernetes/pkg/core/resources/model"
	"github.com/apache/dubbo-kubernetes/pkg/core/resources/registry"
)

const (
	ServiceNameMappingType model.ResourceType = "ServiceNameMapping"
)

var _ model.Resource = &ServiceNameMappingResource{}

type ServiceNameMappingResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.ServiceNameMapping
}

func NewServiceNameMappingResource() *ServiceNameMappingResource {
	return &ServiceNameMappingResource{
		Spec: &mesh_proto.ServiceNameMapping{},
	}
}

func (t *ServiceNameMappingResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ServiceNameMappingResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ServiceNameMappingResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ServiceNameMappingResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.ServiceNameMapping)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &mesh_proto.ServiceNameMapping{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *ServiceNameMappingResource) Descriptor() model.ResourceTypeDescriptor {
	return ServiceNameMappingResourceTypeDescriptor
}

var _ model.ResourceList = &ServiceNameMappingResourceList{}

type ServiceNameMappingResourceList struct {
	Items      []*ServiceNameMappingResource
	Pagination model.Pagination
}

func (l *ServiceNameMappingResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ServiceNameMappingResourceList) GetItemType() model.ResourceType {
	return ServiceNameMappingType
}

func (l *ServiceNameMappingResourceList) NewItem() model.Resource {
	return NewServiceNameMappingResource()
}

func (l *ServiceNameMappingResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ServiceNameMappingResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ServiceNameMappingResource)(nil), r)
	}
}

func (l *ServiceNameMappingResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func (l *ServiceNameMappingResourceList) SetPagination(p model.Pagination) {
	l.Pagination = p
}

var ServiceNameMappingResourceTypeDescriptor = model.ResourceTypeDescriptor{
	Name:                ServiceNameMappingType,
	Resource:            NewServiceNameMappingResource(),
	ResourceList:        &ServiceNameMappingResourceList{},
	ReadOnly:            false,
	AdminOnly:           false,
	Scope:               model.ScopeMesh,
	KDSFlags:            model.GlobalToAllZonesFlag,
	WsPath:              "servicenamemappings",
	DubboctlArg:         "servicenamemapping",
	DubboctlListArg:     "servicenamemappings",
	AllowToInspect:      true,
	IsPolicy:            true,
	SingularDisplayName: "Service Name Mapping",
	PluralDisplayName:   "Service Name Mappings",
	IsExperimental:      false,
}

func init() {
	registry.RegisterType(ServiceNameMappingResourceTypeDescriptor)
}
