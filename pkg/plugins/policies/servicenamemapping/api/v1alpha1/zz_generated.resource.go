// Generated by tools/policy-gen.
// Run "make generate" to update this file.

// nolint:whitespace
package v1alpha1

import (
	_ "embed"
	"fmt"

	"k8s.io/kube-openapi/pkg/validation/spec"
	"sigs.k8s.io/yaml"

	"github.com/apache/dubbo-kubernetes/pkg/core/resources/model"
)

//go:embed schema.yaml
var rawSchema []byte

func init() {
	var schema spec.Schema
	if err := yaml.Unmarshal(rawSchema, &schema); err != nil {
		panic(err)
	}
	rawSchema = nil
	ServiceNameMappingResourceTypeDescriptor.Schema = &schema
}

const (
	ServiceNameMappingType model.ResourceType = "ServiceNameMapping"
)

var _ model.Resource = &ServiceNameMappingResource{}

type ServiceNameMappingResource struct {
	Meta model.ResourceMeta
	Spec *ServiceNameMapping
}

func NewServiceNameMappingResource() *ServiceNameMappingResource {
	return &ServiceNameMappingResource{
		Spec: &ServiceNameMapping{},
	}
}

func (t *ServiceNameMappingResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ServiceNameMappingResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ServiceNameMappingResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ServiceNameMappingResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*ServiceNameMapping)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		if protoType == nil {
			t.Spec = &ServiceNameMapping{}
		} else {
			t.Spec = protoType
		}
		return nil
	}
}

func (t *ServiceNameMappingResource) Descriptor() model.ResourceTypeDescriptor {
	return ServiceNameMappingResourceTypeDescriptor
}

func (t *ServiceNameMappingResource) Validate() error {
	if v, ok := interface{}(t).(interface{ validate() error }); !ok {
		return nil
	} else {
		return v.validate()
	}
}

var _ model.ResourceList = &ServiceNameMappingResourceList{}

type ServiceNameMappingResourceList struct {
	Items      []*ServiceNameMappingResource
	Pagination model.Pagination
}

func (l *ServiceNameMappingResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ServiceNameMappingResourceList) GetItemType() model.ResourceType {
	return ServiceNameMappingType
}

func (l *ServiceNameMappingResourceList) NewItem() model.Resource {
	return NewServiceNameMappingResource()
}

func (l *ServiceNameMappingResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ServiceNameMappingResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ServiceNameMappingResource)(nil), r)
	}
}

func (l *ServiceNameMappingResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func (l *ServiceNameMappingResourceList) SetPagination(p model.Pagination) {
	l.Pagination = p
}

var ServiceNameMappingResourceTypeDescriptor = model.ResourceTypeDescriptor{
	Name:                ServiceNameMappingType,
	Resource:            NewServiceNameMappingResource(),
	ResourceList:        &ServiceNameMappingResourceList{},
	Scope:               model.ScopeMesh,
	DDSFlags:            model.GlobalToAllZonesFlag | model.ZoneToGlobalFlag,
	WsPath:              "servicenamemappings",
	DubboctlArg:         "servicenamemapping",
	DubboctlListArg:     "servicenamemappings",
	AllowToInspect:      true,
	IsPolicy:            true,
	IsExperimental:      false,
	SingularDisplayName: "Service Name Mapping",
	PluralDisplayName:   "Service Name Mappings",
	IsPluginOriginated:  true,
}
